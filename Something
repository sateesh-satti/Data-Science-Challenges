{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Y sateesh_Nielsen Data Scientist - Product Development (Python Notebook).ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "QafL8RrHVtF-"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AYAb_fo34WTM",
        "colab_type": "text"
      },
      "source": [
        "__Try to slove as many as possible. Questions are not mandetory but has some weights associated with each.__"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3MHOTyiC68gW",
        "colab_type": "text"
      },
      "source": [
        "### `MarketLevelData` has 10 variables and 104 weeks execusion data points stored in a pandas dataframe. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wYIazYjb4TUz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "n_tactic = 10\n",
        "n_weeks = 104\n",
        "col_names = ['TV1','RADIO_FM','TV2','TV3','RADIO_AM','TV4','ONLINE','YT1',\n",
        "             'YT1','FB']\n",
        "causals = np.random.normal(loc=200, scale = 800, size=(n_weeks,n_tactic))\n",
        "causals = np.where(causals>0, causals, 0)\n",
        "MarketLevelData = pd.DataFrame(causals, columns=col_names)\n",
        "rr = pd.Series(np.random.uniform(.1,.6,size = n_tactic),\n",
        "               index = col_names,\n",
        "               name = 'rr')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "be3a8afc-9205-4dd9-b13c-7095cab782d3",
        "id": "2MT-RjF17rdO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "MarketLevelData.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TV1</th>\n",
              "      <th>RADIO_FM</th>\n",
              "      <th>TV2</th>\n",
              "      <th>TV3</th>\n",
              "      <th>RADIO_AM</th>\n",
              "      <th>TV4</th>\n",
              "      <th>ONLINE</th>\n",
              "      <th>YT1</th>\n",
              "      <th>YT1</th>\n",
              "      <th>FB</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1053.122848</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>329.576086</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>113.098173</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2034.098917</td>\n",
              "      <td>1294.757531</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>283.300220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>336.227331</td>\n",
              "      <td>566.208803</td>\n",
              "      <td>954.397981</td>\n",
              "      <td>804.045678</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>136.426105</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>324.851683</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>209.418397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>349.568534</td>\n",
              "      <td>798.428998</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1182.038007</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1568.723491</td>\n",
              "      <td>1356.302094</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>814.390391</td>\n",
              "      <td>172.550008</td>\n",
              "      <td>65.864180</td>\n",
              "      <td>789.256839</td>\n",
              "      <td>320.698737</td>\n",
              "      <td>362.934967</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>441.195976</td>\n",
              "      <td>126.096082</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1456.226738</td>\n",
              "      <td>723.698087</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1039.014009</td>\n",
              "      <td>484.075199</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           TV1    RADIO_FM         TV2  ...          YT1          YT1           FB\n",
              "0  1053.122848    0.000000  329.576086  ...  1294.757531     0.000000   283.300220\n",
              "1   336.227331  566.208803  954.397981  ...   324.851683     0.000000   209.418397\n",
              "2     0.000000    0.000000    0.000000  ...     0.000000  1568.723491  1356.302094\n",
              "3   814.390391  172.550008   65.864180  ...     0.000000     0.000000     0.000000\n",
              "4     0.000000  441.195976  126.096082  ...     0.000000  1039.014009   484.075199\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9b993f46-9234-4d70-c028-0251d1eba46f",
        "id": "4N8KA-617rNL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "rr"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TV1         0.299018\n",
              "RADIO_FM    0.257095\n",
              "TV2         0.574976\n",
              "TV3         0.284621\n",
              "RADIO_AM    0.146438\n",
              "TV4         0.460893\n",
              "ONLINE      0.265066\n",
              "YT1         0.335013\n",
              "YT1         0.584584\n",
              "FB          0.413170\n",
              "Name: rr, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TSBDjFARrV9X",
        "colab_type": "text"
      },
      "source": [
        "### Perform the foumula mentioned bellow by considering the `MarketLevelData` dataframe and `rr` vecctor:\n",
        "\n",
        "$$AS_{i,j} = AS_{i,j-1} + (rr_{i} \\times Var_{i,j}), i = 1(1)10, j = 1(1)104$$\n",
        "\n",
        "Here Var represents the columns of dataframe `MarketLevelData`. AS is the elements of the new dataframe. Write a function which will impliment the following formula in `MarketLevelData` dataframe. \n",
        "\n",
        "1. Can you write a function using for loop which will compute this function in parallel? Is it possible to make it JIT compitable? If yes, then how? \n",
        "2. Write a pure numpy implimentation of the above mentioned formula and define a function. Use broadcasting and Matrix multiplication if there is a scope. \n",
        "3. Is it possible to scale-in and scale-out the above mentioned function? If yes, the what library will you use to perform the task. \n",
        "4. In each of the above mentioned cases include try catch to handel error and display relevant message. Warnings, messages should be converted to more meaningful logs.\n",
        "5. Include comment, doc string, stactic typing to make the code readable and reproducable. \n",
        "6. While writing this function take runtime into consideration. Profile and compare 3 functions and demonstrate how can improve the run time effeciency of the functions.\n",
        "7. Write few unit test cases for above mentioned function. What other testing could be considered to make the functions robust?\n",
        "8. Is there any function avaiable in other libraries which can perform this task without writing the function from stractch. \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "####__Expected format of function definition:__\n",
        "\n",
        "```python\n",
        "\n",
        "def q1_calculation_for_loop(fargs, *args, **kwargs):\n",
        "  \"\"\"\n",
        "  Do something.\n",
        "  \"\"\"\n",
        "  return result\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tl8mbKm2-JzZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "as_df = pd.DataFrame()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zAriOmNRB4U9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "first_iter = True\n",
        "for i in range(1,n_tactic+1):\n",
        "  for j in range(1,n_weeks+1):\n",
        "    if first_iter = True:\n",
        "      as_df[i,j] = rr[i] * MarketLevelData.values[i,j]\n",
        "      \n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_z7yemXRw7EE",
        "colab_type": "text"
      },
      "source": [
        "### After running the cell below there will be a `salesdata` loaded in memory. Perform the following tasks in order:\n",
        "\n",
        "9.  NA and outlier imputation. \n",
        "10.  Non zero sales and count for each store. \n",
        "11.  Tally total sales and count at a store and date level. \n",
        "12.   Dates for each store with minimum and maximum sales.\n",
        "13.   There can be multiple same date variable present for each store. Make sure after processing each date appear only once for each store.\n",
        "14.   Date colum ranges between 2018/01/01 to 2018/01/07. Make sure that all these dates are present for each store. Do the required padding/filling for other\n",
        "15.   columns while performing this operation. Sales and count can be aggregated by addition. \n",
        "16.   Change date format to 'dd-mm-yyyy'.\n",
        "17.   Create a new string column in the same dataframe named 'Day' and map days of week corresponding to each date in the datafreame. \n",
        "18.  While performing the task take runtime, memory consumption into consideration. Demonstrate all the best practise to write, maintain and develop readable and reproducable code."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MyGN3Z0l5J-R",
        "colab_type": "code",
        "outputId": "ff3292c5-a487-4ac0-81e5-30311ac29a2c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "url='https://raw.githubusercontent.com/pandalearnstocode/csvfiles/master/salesdata.csv'\n",
        "salesdata=pd.read_csv(url)\n",
        "# dataframe = salesdata.copy()\n",
        "salesdata.head()\n"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th>DATES</th>\n",
              "      <th>SALES</th>\n",
              "      <th>COUNT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>624.0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>271.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>2018-01-05</td>\n",
              "      <td>5589.0</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>5541.0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>40.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     STORES       DATES   SALES  COUNT\n",
              "0  STORE110  2018-01-01   624.0   10.0\n",
              "1  STORE110  2018-01-03   271.0    3.0\n",
              "2  STORE110  2018-01-05  5589.0    9.0\n",
              "3  STORE110  2018-01-06  5541.0   10.0\n",
              "4  STORE110  2018-01-07    40.0    6.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lROktoSlHV7J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4cf20272-14c8-4387-a902-c5b4ba57557a"
      },
      "source": [
        "salesdata['DATES'].max(),salesdata['DATES'].min()"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('2018-01-07', '2018-01-01')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oj2O6AB9GMzI",
        "colab_type": "text"
      },
      "source": [
        "###**9) NA and Outlier Imputation**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MZD637btGYQk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Method to find missing values for entire dataframe\n",
        "\n",
        "def missing_values_table(df):\n",
        "\tmis_val = df.isnull().sum()\n",
        "\tmis_val_percent = 100 * df.isnull().sum() / len(df)\n",
        "\tmis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n",
        "\tmis_val_table_ren_columns = mis_val_table.rename(columns={0: 'Missing Values', 1: '% of Total Values'})\n",
        "\tmis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:, 1] != 0].sort_values('% of Total Values', ascending=False).round(2)\n",
        "\tprint(\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n There are \" + str(mis_val_table_ren_columns.shape[0]) + \" columns that have missing values.\")\n",
        "\treturn mis_val_table_ren_columns\n",
        "\n",
        "missing_values_table(salesdata)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sDJAegfgGjfP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Imputing missing SALES and COUNT columns using Mean\n",
        "\n",
        "salesdata['SALES'] = np.where(salesdata['SALES'].isnull(), np.mean(salesdata['SALES']), salesdata['SALES'])\n",
        "salesdata['COUNT'] = np.where(salesdata['COUNT'].isnull(), int(np.mean(salesdata['COUNT'])), salesdata['COUNT'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e36j0SQ0G2uP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "c33422fc-cde7-47ff-c4ad-192b6f7ce731"
      },
      "source": [
        "# Finding Outliers using BOX Plot\n",
        "\n",
        "import seaborn as sns\n",
        "sns.boxplot(x=salesdata['SALES'])"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9261c26438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAEKCAYAAAAl5S8KAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADMRJREFUeJzt3V+spHV9x/HPl91KV5EKXUPhQF3o\nUhsujCJpbaL2wgaBVOmftEhMxLYJMa2bNW3TaEga05vGNjax2z8EU1NtbEVjTb3QVEpqe4W6axGw\ngBwopm4RQRqxZYsCv17Mc3TYwrJn2Zn5nuX1Sk52zrNz5vnObw5vZp7Z85waYwSA1Ttp1QMAMCPI\nAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNLF9M1feuXPn2LVr14JGATgxHThw4MExxouf6Xqb\nCvKuXbuyf//+Y58K4Dmoqr56NNdzyAKgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEG\naEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZrY1O/U627fvn1ZX19f9RgLc/DgwSTJ\n2traiidZjN27d2fPnj2rHgNW5oQK8vr6em6+7fY8/vzTVz3KQmx75FtJkq8/ekI9bEmSbY88tOoR\nYOVOuP+yH3/+6Tn0E5eteoyF2HHHp5LkhLx/G/cNnsscQwZoQpABmhBkgCYEGaAJQQZoQpABmhBk\ngCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpAB\nmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZo\nQpABmhBkgCYEGaAJQQZoYilB3rdvX/bt27eMXQEcV8vs1/Zl7GR9fX0ZuwE47pbZL4csAJoQZIAm\nBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQ\nZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQ\nAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZrYvoydHDx4MIcOHcrevXsXup/19fWc9J2x\n0H2wGCf978NZX//2wr9HYLPW19ezY8eOpezrGZ8hV9XVVbW/qvY/8MADy5gJ4DnpGZ8hjzGuS3Jd\nklx00UXH9PRzbW0tSfK+973vWL78qO3duzcH7rl/oftgMZ74wVOz+7wzFv49Apu1zFdtjiEDNCHI\nAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCAD\nNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQ\nhCADNCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQhCADNCHIAE1sX8ZOdu/evYzdABx3y+zXUoK8\nZ8+eZewG4LhbZr8csgBoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJ\nQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYE\nGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaCJ7ase4Hjb9shD\n2XHHp1Y9xkJse+SbSXJC3r9tjzyU5IxVjwErdUIFeffu3aseYaEOHnwsSbK2diKG64wT/vGDZ3JC\nBXnPnj2rHgHgmDmGDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOC\nDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBM1xjj6K1c9kOSrx7ivnUkePMavXaatMmeydWbd\nKnMmW2dWcx5/i5z1JWOMFz/TlTYV5GejqvaPMS5ays6eha0yZ7J1Zt0qcyZbZ1ZzHn8dZnXIAqAJ\nQQZoYplBvm6J+3o2tsqcydaZdavMmWydWc15/K181qUdQwbgyByyAGhi4UGuqkuq6s6qWq+qdy56\nf0cxzzlV9U9V9W9V9eWq2jttf3dVHayqm6ePy+a+5l3T/HdW1euXOOu9VXXrNM/+advpVXVDVd01\n/XnatL2q6k+mOW+pqguXNONL59bs5qp6uKre0WU9q+oDVfWNqrptbtum17Cqrpquf1dVXbWkOf+o\nqu6YZvlEVb1o2r6rqg7Nre21c1/zyul7Zn26L7WkWTf9eC+6DU8z5/VzM95bVTdP21e6pt8zxljY\nR5JtSe5Ocl6S5yX5UpILFrnPo5jpzCQXTpdfmOQrSS5I8u4kv/MU179gmvvkJOdO92fbkma9N8nO\nw7b9YZJ3TpffmeQ90+XLknw6SSV5VZLPrWBttyX5epKXdFnPJK9NcmGS2451DZOcnuSe6c/Tpsun\nLWHOi5Nsny6/Z27OXfPXO+x2Pj/NXtN9uXRJa7qpx3sZbXiqOQ/7+/cm+b0Oa7rxsehnyD+ZZH2M\ncc8Y4ztJPpLk8gXv84jGGPeNMb44Xf52ktuTrB3hSy5P8pExxqNjjH9Psp7Z/VqVy5N8cLr8wSQ/\nP7f9Q2PmpiQvqqozlzzb65LcPcY40g8PLXU9xxj/kuShp5hhM2v4+iQ3jDEeGmP8V5Ibklyy6DnH\nGJ8ZYzw2fXpTkrOPdBvTrKeOMW4as5J8KN+/bwud9Qie7vFeeBuONOf0LPdXkvztkW5jWWu6YdFB\nXkvyH3Offy1Hjt9SVdWuJK9I8rlp09unl4cf2HgZm9Xeh5HkM1V1oKqunradMca4b7r89SRnTJc7\nrPWb8uRv8G7ruWGza9hh5l/L7NnZhnOr6l+r6p+r6jXTtrVptg3LnnMzj/eq1/Q1Se4fY9w1t23l\na/qcfVOvqk5J8vEk7xhjPJzkL5L8WJKXJ7kvs5czq/bqMcaFSS5N8ptV9dr5v5z+j93in8lU1fOS\nvDHJx6ZNHdfz/+m0hk+nqq5J8liSD0+b7kvyo2OMVyT5rSR/U1Wnrmq+yZZ4vOdcmSc/eWixposO\n8sEk58x9fva0baWq6gcyi/GHxxh/lyRjjPvHGI+PMZ5I8v58/2X0yu7DGOPg9Oc3knximun+jUMR\n05/fWPWck0uTfHGMcX/Scz3nbHYNVzZzVb01yc8lefP0P49ML/+/OV0+kNmx2B+fZpo/rLHM79XN\nPt6rXNPtSX4xyfUb27qs6aKD/IUk51fVudMzqDcl+eSC93lE07Gjv0xy+xjjj+e2zx9v/YUkG+/M\nfjLJm6rq5Ko6N8n5mR3kX/ScL6iqF25czuwNntumeTbe5b8qyd/PzfmW6V8KvCrJt+Zeli/Dk55x\ndFvPw2x2Df8hycVVddr0UvziadtCVdUlSX43yRvHGI/MbX9xVW2bLp+X2RreM836cFW9avo+f8vc\nfVv0rJt9vFfZhp9NcscY43uHItqs6aLeLZx7h/KyzP4lw91Jrln0/o5inldn9hL1liQ3Tx+XJfnr\nJLdO2z+Z5My5r7lmmv/OLPAd1sPmPC+zd56/lOTLG2uX5IeT3JjkriT/mOT0aXsl+bNpzluTXLTE\nNX1Bkm8m+aG5bS3WM7P/SdyX5LuZHf/79WNZw8yO4a5PH7+6pDnXMzvOuvF9eu103V+aviduTvLF\nJG+Yu52LMovh3Un+NNMPfy1h1k0/3otuw1PNOW3/qyRvO+y6K13TjQ8/qQfQxHP2TT2AbgQZoAlB\nBmhCkAGaEGSAJgSZVqrqmpqdhe+W6axbPzVt31lV362qtx12/Xuraudh295aVQ/Uk89Cd0FVnTSd\nreu26exdX5j+bSy0sH3VA8CGqvrpzH4q7cIxxqNTaJ83/fUvZ3aCnSuTXPs0NzHv+jHG2w+7/SuT\nnJXkZWOMJ6rq7CT/c9zuADxLniHTyZlJHhxjPJokY4wHxxj/Of3dlUl+O8naFNJjvf37xuzHezPG\n+NqYnb0NWhBkOvlMknOq6itV9edV9TPJ7JcKZPaTX59P8tEkVxzFbV1x2CGLHdPXvmH6/L1V9YqF\n3RM4BoJMG2OM/07yyiRXJ3kgyfXTyXWuyCymyey8uVcexc1dP8Z4+dzHoTE7d8FLk7wryRNJbqyq\n1x3v+wHHyjFkWhljPJ7ks0k+W1W3Znbyn7OS/EhVvXm62llVdf548rlsj/b2H83svMKfrqr7MzvZ\n+I3HZXh4ljxDpo2a/X6+8+c2vTyzX/VzyhhjbYyxa4yxK8kf5OieJR9++xdW1VnT5ZOSvCzJkX67\nCSyVZ8h0ckqSfTX7ZZ6PZXa2s89ldgaxeR/P7Fy2vz99fktVPTFd/uh0/Suq6tVzX/MbSU5N8v6q\nOnna9vnMzt4FLTjbG0ATDlkANCHIAE0IMkATggzQhCADNCHIAE0IMkATggzQxP8BrVNTgOvoEnwA\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yJXIChjYLwIl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "f0141000-1ff0-4cf5-e330-9b1723bf8272"
      },
      "source": [
        "sns.boxplot(x=salesdata['COUNT'])"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9261c57cf8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 116
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAEKCAYAAAAl5S8KAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADB1JREFUeJzt3X+MZfVZx/HPw25/bCml4DaI28aV\nrq0RY5FumtqQpqYNtsSAbfwD00S0mqbRrlsTYjCoISZGq8EIa2OD2qQ1ja2/UGJoBEXTaAJ2lwCF\nAjIQGt3wq6xCm8W20K9/3LNkGGaW2e3Mvc+W1yuZzJ1zz937zNmz75177r1naowRABbvpEUPAMCM\nIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNDE1mNZefv27WPnzp2bNArAd6YDBw58ZYzxmhda\n75iCvHPnzuzfv//4pwJ4EaqqL69nPYcsAJoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQ\nZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgiWP6nXpsrn379mVpaWnRY2yKgwcP\nJkl27Nix4Emea9euXdmzZ8+ix4AkgtzK0tJSbrvz7jzzitMXPcqG23L4iSTJw1/vs8ttOXxo0SPA\nc/T510GS5JlXnJ6nfuCCRY+x4bbdc32StPrejswEXTiGDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgA\nTQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0\nIcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCEIAM0IcgATQgyQBOCDNCE\nIAM0IcgATQgyQBOCDNDEXIK8b9++7Nu3bx53BbCh5tmvrfO4k6WlpXncDcCGm2e/HLIAaEKQAZoQ\nZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQ\nAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEG\naEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaGLrPO7k4MGDeeqpp7J379553N0Ja2lpKSd9\nYyx6jBeNk/7vySwtfdV+yVEtLS1l27Ztc7mvF/wJuao+WFX7q2r/Y489No+ZAF6UXvAn5DHGNUmu\nSZLdu3cf149vO3bsSJJcddVVx3PzF429e/fmwAOPLHqMF41vvfxV2XXWGfZLjmqej6AcQwZoQpAB\nmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZo\nQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJ\nQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmtg6jzvZtWvXPO4GYMPNs19zCfKe\nPXvmcTcAG26e/XLIAqAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYE\nGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBk\ngCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCYEGaAJQQZoQpABmhBkgCa2LnoAnmvL4UPZ\nds/1ix5jw205/HiStPrethw+lOSMRY8BzxLkRnbt2rXoETbNwYNPJ0l27OgUwDO+o7c5Jx5BbmTP\nnj2LHgFYIMeQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaEKQAZoQ\nZIAmBBmgCUEGaEKQAZoQZIAmBBmgCUEGaKLGGOtfueqxJF8+zvvanuQrx3nbRTL3fJl7vk7UuZMT\na/bvHWO85oVWOqYgfzuqav8YY/dc7mwDmXu+zD1fJ+rcyYk9+1ocsgBoQpABmphnkK+Z431tJHPP\nl7nn60SdOzmxZ1/V3I4hA3B0DlkANLHhQa6qd1fVvVW1VFWXrXL9y6rqs9P1t1TVzo2e4VhV1euq\n6l+q6ktVdVdV7V1lnXdU1RNVddv08ZuLmHWlqnqwqr44zbR/leurqq6etvcdVXXuIuZcMdMbl23H\n26rqyar6yIp1WmzvqvpEVT1aVXcuW3Z6Vd1YVfdNn09b47aXTOvcV1WXzG/qNef+/aq6Z9oPrq2q\nV69x26PuU5ttjdmvqKqDy/aHC9a47VH7094YY8M+kmxJcn+Ss5K8NMntSX5wxTq/mOTj0+WLk3x2\nI2c4zrnPTHLudPmUJP+5ytzvSPIPi551ldkfTLL9KNdfkORzSSrJW5PcsuiZV9lnHs7sdZrttneS\ntyc5N8mdy5b9XpLLpsuXJfnoKrc7PckD0+fTpsunLXju85NsnS5/dLW517NPLWj2K5Jcuo596aj9\n6f6x0T8hvyXJ0hjjgTHGN5J8JslFK9a5KMknp8t/neSdVVUbPMcxGWM8NMa4dbr81SR3J9mxyJk2\n0EVJPjVmbk7y6qo6c9FDLfPOJPePMY73DUebaozx+SSHVixevg9/MslPrnLTH09y4xjj0Bjjf5Lc\nmOTdmzboCqvNPca4YYzx9PTlzUleO695jsUa23w91tOf1jY6yDuS/Neyr/87zw/bs+tMO8cTSb5r\ng+c4btMhlB9JcssqV/9oVd1eVZ+rqrPnOtjaRpIbqupAVX1wlevX83eySBcn+Ys1ruu4vZPkjDHG\nQ9Plh5Ocsco63bf7BzJ75LSaF9qnFuXD0+GWT6xxmKj7Nn9BntRbpqpemeRvknxkjPHkiqtvzexh\n9ZuS7Evyd/Oebw3njTHOTfKeJL9UVW9f9EDrVVUvTXJhkr9a5equ2/s5xuyx8gn1UqWqujzJ00k+\nvcYqHfepP07y+iTnJHkoyZWLHWdzbHSQDyZ53bKvXzstW3Wdqtqa5NQkj2/wHMesql6SWYw/Pcb4\n25XXjzGeHGN8bbp8fZKXVNX2OY/5PGOMg9PnR5Ncm9nDtuXW83eyKO9JcusY45GVV3Td3pNHjhz2\nmT4/uso6Lbd7Vf1skp9I8v7pP5PnWcc+NXdjjEfGGM+MMb6V5E/WmKnlNj8WGx3kLyT5/qr6vumn\nn4uTXLdineuSHHnG+aeS3LTWjjEv0zHsP0ty9xjjD9ZY57uPHOuuqrdktu0W+h9JVZ1cVaccuZzZ\nkzZ3rljtuiQ/M73a4q1Jnlj2cHvRfjprHK7ouL2XWb4PX5Lk71dZ5x+TnF9Vp00Pr8+fli1MVb07\nya8muXCMcXiNddazT83diuc93pvVZ1pPf3rbhGdIL8jsVQr3J7l8WvZbme0ESfLyzB6iLiX5jyRn\nLfqZzSTnZfaw844kt00fFyT5UJIPTet8OMldmT1ze3OStzWY+6xpntun2Y5s7+VzV5KPTX8fX0yy\ne9FzT3OdnFlgT122rN32zuw/jIeSfDOzY5I/n9lzHv+c5L4k/5Tk9Gnd3Un+dNltPzDt50tJfq7B\n3EuZHWM9so8febXT9yS5/mj7VIPZ/3zaf+/ILLJnrpx9+vp5/TmRPrxTD6AJT+oBNCHIAE0IMkAT\nggzQhCADNCHItDC97vgzVXX/9Jbd66vqDVV1dlXdNJ3B676q+o1lr0++oqouXfHnPHjkDSRVNarq\nymXXXTrd5vJlZw17ZtnlX57vdw3PJcgs3BTYa5P86xjj9WOMNyf5tczOEXFdkt8dY7wxyZuSvC2z\nMwaux9eTvG/lO/zGGL89xjhnjHFOkqeOXB5jXL1R3xMcD0Gmgx9L8s0xxsePLBhj3J7kDUn+fYxx\nw7TscGZvGFnveW6fzuzX/PzKxo4Lm0OQ6eCHkhxYZfnZK5ePMe5P8sqqetU6/+yPJXl/VZ367Y0I\nm0+QOZGt9TbTZ5eP2Vn7PpXE8WHaE2Q6uCvJm1dZ/qWVy6vqrCRfm0L7eGa/jWO5U5L874plf5jZ\n+RBO3pBpYZMIMh3clORly0+GXlU/nOTeJOdV1bumZduSXJ3Zr1BKks8nuXDZ2cnel+T2McYzy//w\nMcahJH+ZWZShLUFm4cbsDFfvTfKu6WVvdyX5ncx+G8dFSX69qu7N7GxfX0jyR9Pt7pgu/1tV3ZbZ\n2eJ+YY27uTJJl/Mpw6qc7Q2gCT8hAzQhyABNCDJAE4IM0IQgAzQhyABNCDJAE4IM0MT/A/HXO4QL\ndGEwAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GKfAg-omM0AZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#detecting outlier using IQR\n",
        "# returns the lower bound and upper bound and the values beyond these are outliers\n",
        "\n",
        "def detect_outlier(data):\n",
        "  col_data= data\n",
        "  sorted(col_data)\n",
        "  q1, q3= np.percentile(col_data,[25,75])\n",
        "  iqr = q3 - q1\n",
        "  lower_bound = q1 -(1.5 * iqr) \n",
        "  upper_bound = q3 +(1.5 * iqr) \n",
        "  lower_bound = data.min() if lower_bound < data.min() else lower_bound\n",
        "  upper_bound = data.max() if upper_bound > data.max() else upper_bound\n",
        "  return lower_bound,upper_bound"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0MLmvnNSWS0A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sales_lower,sales_upper = detect_outlier(salesdata['SALES'])\n",
        "count_lower,count_upper = detect_outlier(salesdata['COUNT'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LSNwdq2TQ01z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "58a189c0-0c5a-4bc9-84c7-149ffc464e84"
      },
      "source": [
        "salesdata['SALES'][salesdata['SALES'] > sales_upper]"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2     5589.0\n",
              "3     5541.0\n",
              "10    4400.0\n",
              "43    6652.0\n",
              "Name: SALES, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J9rlyLqIROqv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2a23b4bf-10b2-40f8-98ed-2c9b44a6a059"
      },
      "source": [
        "salesdata['SALES'][(salesdata['SALES'] < sales_lower)]"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], Name: SALES, dtype: float64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6hKqDAH7UZqj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Imputing outlier for SALES Column by updating the values with more than upper bound with 3rd Quartile and value lower than lower bound with 1st Quartile\n",
        "\n",
        "salesdata.loc[salesdata['SALES'] > sales_upper,'SALES'] = sales_upper"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NWW5kxr9VC4l",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "05493a15-ec71-4ce9-df50-adb336ce13ca"
      },
      "source": [
        "#detecting Outlier for 'COUNT' Column\n",
        "\n",
        "salesdata['COUNT'][salesdata['COUNT'] > count_upper]"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], Name: COUNT, dtype: float64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_f2VyT_CVS1A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "315cd43d-55d9-461f-8f99-762718e16eb7"
      },
      "source": [
        "salesdata['COUNT'][salesdata['COUNT'] < count_lower]"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], Name: COUNT, dtype: float64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nMa7a9bhVYuB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Imputing Outlier in 'COUNT' Column\n",
        "\n",
        "salesdata.loc[salesdata['COUNT'] > count_upper,'COUNT'] = count_upper"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QafL8RrHVtF-",
        "colab_type": "text"
      },
      "source": [
        "### **10) Non Zero Sales and COUNT for each Store**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eBXmMmxcZiyv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "outputId": "f24352c6-be09-44da-9f7c-7d02dc0d2537"
      },
      "source": [
        "#Each Store SALES and COUNT\n",
        "salesdata[(salesdata['SALES'] != 0) & (salesdata['COUNT'] != 0)].groupby(['STORES']).agg({\"SALES\":sum,\"COUNT\" : sum})"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SALES</th>\n",
              "      <th>COUNT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORES</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>STORE110</th>\n",
              "      <td>4524.500000</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE113</th>\n",
              "      <td>2174.000000</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>3971.354167</td>\n",
              "      <td>25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE115</th>\n",
              "      <td>2993.000000</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE127</th>\n",
              "      <td>1910.000000</td>\n",
              "      <td>38.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE133</th>\n",
              "      <td>2710.000000</td>\n",
              "      <td>27.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE136</th>\n",
              "      <td>1857.000000</td>\n",
              "      <td>38.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE143</th>\n",
              "      <td>2178.000000</td>\n",
              "      <td>30.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>3404.354167</td>\n",
              "      <td>33.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE196</th>\n",
              "      <td>1237.000000</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                SALES  COUNT\n",
              "STORES                      \n",
              "STORE110  4524.500000   38.0\n",
              "STORE113  2174.000000    9.0\n",
              "STORE114  3971.354167   25.0\n",
              "STORE115  2993.000000   50.0\n",
              "STORE127  1910.000000   38.5\n",
              "STORE133  2710.000000   27.0\n",
              "STORE136  1857.000000   38.5\n",
              "STORE143  2178.000000   30.0\n",
              "STORE149  3404.354167   33.5\n",
              "STORE196  1237.000000   16.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9M9wp5FpbtdO",
        "colab_type": "text"
      },
      "source": [
        "###**11) Tally total sales and count at a store and date level.**\n",
        "\n",
        "Tallying total sales and count by calculating cumsum for both store and date **levels**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "00b9b261-2241-4e92-d556-06ce39f4fb69",
        "id": "d5wm4HST7r3a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1382
        }
      },
      "source": [
        "salesdata.groupby(['STORES','DATES']).agg({\"SALES\":sum,\"COUNT\" : sum}).transform(pd.Series.cumsum)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>SALES</th>\n",
              "      <th>COUNT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORES</th>\n",
              "      <th>DATES</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">STORE110</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>624.000000</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>895.000000</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>2689.750000</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>4484.500000</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>4524.500000</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">STORE113</th>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>4524.500000</td>\n",
              "      <td>54.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>5336.500000</td>\n",
              "      <td>59.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>5800.500000</td>\n",
              "      <td>60.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>6698.500000</td>\n",
              "      <td>63.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>6698.500000</td>\n",
              "      <td>73.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">STORE114</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>7055.500000</td>\n",
              "      <td>78.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>8025.500000</td>\n",
              "      <td>83.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>8875.104167</td>\n",
              "      <td>89.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>8875.104167</td>\n",
              "      <td>93.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>10669.854167</td>\n",
              "      <td>102.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">STORE115</th>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>11473.854167</td>\n",
              "      <td>128.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>12053.854167</td>\n",
              "      <td>144.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>12476.854167</td>\n",
              "      <td>150.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>13662.854167</td>\n",
              "      <td>152.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">STORE127</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>14450.854167</td>\n",
              "      <td>177.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>14630.854167</td>\n",
              "      <td>187.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>15148.854167</td>\n",
              "      <td>187.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>16090.854167</td>\n",
              "      <td>191.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">STORE133</th>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>16789.854167</td>\n",
              "      <td>194.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>17809.854167</td>\n",
              "      <td>205.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>18800.854167</td>\n",
              "      <td>218.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">STORE136</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>18948.854167</td>\n",
              "      <td>225.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>20147.854167</td>\n",
              "      <td>251.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>20657.854167</td>\n",
              "      <td>256.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">STORE143</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>20732.854167</td>\n",
              "      <td>266.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>21690.854167</td>\n",
              "      <td>277.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>22118.854167</td>\n",
              "      <td>285.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>22835.854167</td>\n",
              "      <td>294.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">STORE149</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>22835.854167</td>\n",
              "      <td>299.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>23685.458333</td>\n",
              "      <td>308.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>23962.458333</td>\n",
              "      <td>325.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>25757.208333</td>\n",
              "      <td>332.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>26240.208333</td>\n",
              "      <td>333.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">STORE196</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>26649.208333</td>\n",
              "      <td>340.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>27307.208333</td>\n",
              "      <td>346.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>27307.208333</td>\n",
              "      <td>358.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>27477.208333</td>\n",
              "      <td>361.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                            SALES  COUNT\n",
              "STORES   DATES                          \n",
              "STORE110 2018-01-01    624.000000   10.0\n",
              "         2018-01-03    895.000000   13.0\n",
              "         2018-01-05   2689.750000   22.0\n",
              "         2018-01-06   4484.500000   32.0\n",
              "         2018-01-07   4524.500000   38.0\n",
              "STORE113 2018-01-02   4524.500000   54.5\n",
              "         2018-01-03   5336.500000   59.5\n",
              "         2018-01-04   5800.500000   60.5\n",
              "         2018-01-05   6698.500000   63.5\n",
              "         2018-01-07   6698.500000   73.5\n",
              "STORE114 2018-01-01   7055.500000   78.5\n",
              "         2018-01-04   8025.500000   83.5\n",
              "         2018-01-05   8875.104167   89.5\n",
              "         2018-01-06   8875.104167   93.5\n",
              "         2018-01-07  10669.854167  102.5\n",
              "STORE115 2018-01-02  11473.854167  128.0\n",
              "         2018-01-03  12053.854167  144.5\n",
              "         2018-01-05  12476.854167  150.5\n",
              "         2018-01-07  13662.854167  152.5\n",
              "STORE127 2018-01-01  14450.854167  177.0\n",
              "         2018-01-04  14630.854167  187.0\n",
              "         2018-01-06  15148.854167  187.0\n",
              "         2018-01-07  16090.854167  191.0\n",
              "STORE133 2018-01-02  16789.854167  194.0\n",
              "         2018-01-05  17809.854167  205.0\n",
              "         2018-01-06  18800.854167  218.0\n",
              "STORE136 2018-01-01  18948.854167  225.0\n",
              "         2018-01-03  20147.854167  251.5\n",
              "         2018-01-05  20657.854167  256.5\n",
              "STORE143 2018-01-01  20732.854167  266.5\n",
              "         2018-01-02  21690.854167  277.5\n",
              "         2018-01-05  22118.854167  285.5\n",
              "         2018-01-07  22835.854167  294.5\n",
              "STORE149 2018-01-01  22835.854167  299.5\n",
              "         2018-01-03  23685.458333  308.5\n",
              "         2018-01-04  23962.458333  325.0\n",
              "         2018-01-05  25757.208333  332.0\n",
              "         2018-01-06  26240.208333  333.0\n",
              "STORE196 2018-01-01  26649.208333  340.0\n",
              "         2018-01-02  27307.208333  346.0\n",
              "         2018-01-06  27307.208333  358.0\n",
              "         2018-01-07  27477.208333  361.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_OGel46ccgHu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1382
        },
        "outputId": "3256635a-47aa-4a80-9601-1743246b448b"
      },
      "source": [
        "salesdata.groupby(['DATES','STORES']).agg({\"SALES\":sum,\"COUNT\" : sum}).transform(pd.Series.cumsum)"
      ],
      "execution_count": 235,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>SALES</th>\n",
              "      <th>COUNT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DATES</th>\n",
              "      <th>STORES</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">2018-01-01</th>\n",
              "      <th>STORE110</th>\n",
              "      <td>624.000000</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>981.000000</td>\n",
              "      <td>15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE127</th>\n",
              "      <td>1769.000000</td>\n",
              "      <td>39.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE136</th>\n",
              "      <td>1917.000000</td>\n",
              "      <td>46.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE143</th>\n",
              "      <td>1992.000000</td>\n",
              "      <td>56.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>1992.000000</td>\n",
              "      <td>61.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE196</th>\n",
              "      <td>2401.000000</td>\n",
              "      <td>68.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">2018-01-02</th>\n",
              "      <th>STORE113</th>\n",
              "      <td>2401.000000</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE115</th>\n",
              "      <td>3205.000000</td>\n",
              "      <td>110.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE133</th>\n",
              "      <td>3904.000000</td>\n",
              "      <td>113.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE143</th>\n",
              "      <td>4862.000000</td>\n",
              "      <td>124.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE196</th>\n",
              "      <td>5520.000000</td>\n",
              "      <td>130.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">2018-01-03</th>\n",
              "      <th>STORE110</th>\n",
              "      <td>5791.000000</td>\n",
              "      <td>133.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE113</th>\n",
              "      <td>6603.000000</td>\n",
              "      <td>138.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE115</th>\n",
              "      <td>7183.000000</td>\n",
              "      <td>155.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE136</th>\n",
              "      <td>8382.000000</td>\n",
              "      <td>181.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>9231.604167</td>\n",
              "      <td>190.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">2018-01-04</th>\n",
              "      <th>STORE113</th>\n",
              "      <td>9695.604167</td>\n",
              "      <td>191.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>10665.604167</td>\n",
              "      <td>196.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE127</th>\n",
              "      <td>10845.604167</td>\n",
              "      <td>206.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>11122.604167</td>\n",
              "      <td>223.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"8\" valign=\"top\">2018-01-05</th>\n",
              "      <th>STORE110</th>\n",
              "      <td>12917.354167</td>\n",
              "      <td>232.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE113</th>\n",
              "      <td>13815.354167</td>\n",
              "      <td>235.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>14664.958333</td>\n",
              "      <td>241.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE115</th>\n",
              "      <td>15087.958333</td>\n",
              "      <td>247.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE133</th>\n",
              "      <td>16107.958333</td>\n",
              "      <td>258.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE136</th>\n",
              "      <td>16617.958333</td>\n",
              "      <td>263.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE143</th>\n",
              "      <td>17045.958333</td>\n",
              "      <td>271.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>18840.708333</td>\n",
              "      <td>278.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"6\" valign=\"top\">2018-01-06</th>\n",
              "      <th>STORE110</th>\n",
              "      <td>20635.458333</td>\n",
              "      <td>288.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>20635.458333</td>\n",
              "      <td>292.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE127</th>\n",
              "      <td>21153.458333</td>\n",
              "      <td>292.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE133</th>\n",
              "      <td>22144.458333</td>\n",
              "      <td>305.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE149</th>\n",
              "      <td>22627.458333</td>\n",
              "      <td>306.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE196</th>\n",
              "      <td>22627.458333</td>\n",
              "      <td>318.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">2018-01-07</th>\n",
              "      <th>STORE110</th>\n",
              "      <td>22667.458333</td>\n",
              "      <td>324.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE113</th>\n",
              "      <td>22667.458333</td>\n",
              "      <td>334.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE114</th>\n",
              "      <td>24462.208333</td>\n",
              "      <td>343.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE115</th>\n",
              "      <td>25648.208333</td>\n",
              "      <td>345.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE127</th>\n",
              "      <td>26590.208333</td>\n",
              "      <td>349.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE143</th>\n",
              "      <td>27307.208333</td>\n",
              "      <td>358.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORE196</th>\n",
              "      <td>27477.208333</td>\n",
              "      <td>361.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                            SALES  COUNT\n",
              "DATES      STORES                       \n",
              "2018-01-01 STORE110    624.000000   10.0\n",
              "           STORE114    981.000000   15.0\n",
              "           STORE127   1769.000000   39.5\n",
              "           STORE136   1917.000000   46.5\n",
              "           STORE143   1992.000000   56.5\n",
              "           STORE149   1992.000000   61.5\n",
              "           STORE196   2401.000000   68.5\n",
              "2018-01-02 STORE113   2401.000000   85.0\n",
              "           STORE115   3205.000000  110.5\n",
              "           STORE133   3904.000000  113.5\n",
              "           STORE143   4862.000000  124.5\n",
              "           STORE196   5520.000000  130.5\n",
              "2018-01-03 STORE110   5791.000000  133.5\n",
              "           STORE113   6603.000000  138.5\n",
              "           STORE115   7183.000000  155.0\n",
              "           STORE136   8382.000000  181.5\n",
              "           STORE149   9231.604167  190.5\n",
              "2018-01-04 STORE113   9695.604167  191.5\n",
              "           STORE114  10665.604167  196.5\n",
              "           STORE127  10845.604167  206.5\n",
              "           STORE149  11122.604167  223.0\n",
              "2018-01-05 STORE110  12917.354167  232.0\n",
              "           STORE113  13815.354167  235.0\n",
              "           STORE114  14664.958333  241.0\n",
              "           STORE115  15087.958333  247.0\n",
              "           STORE133  16107.958333  258.0\n",
              "           STORE136  16617.958333  263.0\n",
              "           STORE143  17045.958333  271.0\n",
              "           STORE149  18840.708333  278.0\n",
              "2018-01-06 STORE110  20635.458333  288.0\n",
              "           STORE114  20635.458333  292.0\n",
              "           STORE127  21153.458333  292.0\n",
              "           STORE133  22144.458333  305.0\n",
              "           STORE149  22627.458333  306.0\n",
              "           STORE196  22627.458333  318.0\n",
              "2018-01-07 STORE110  22667.458333  324.0\n",
              "           STORE113  22667.458333  334.0\n",
              "           STORE114  24462.208333  343.0\n",
              "           STORE115  25648.208333  345.0\n",
              "           STORE127  26590.208333  349.0\n",
              "           STORE143  27307.208333  358.0\n",
              "           STORE196  27477.208333  361.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ldFeHGfZgB-o",
        "colab_type": "text"
      },
      "source": [
        "### **12) Dates for each store with minimum and maximum sales.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "riXflvuRgKDv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "salesdata_grouped = salesdata.groupby(['STORES'],as_index=False).agg({\"SALES\":[min,max]})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N3y7j6HMkkgh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "outputId": "a81efc65-3e1a-40bb-b42c-adf1de4873d8"
      },
      "source": [
        "salesdata_grouped"
      ],
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th colspan=\"2\" halign=\"left\">SALES</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>STORE113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>898.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>STORE114</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>STORE115</td>\n",
              "      <td>321.0</td>\n",
              "      <td>1186.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>STORE127</td>\n",
              "      <td>29.0</td>\n",
              "      <td>942.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>STORE133</td>\n",
              "      <td>114.0</td>\n",
              "      <td>906.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>STORE136</td>\n",
              "      <td>143.0</td>\n",
              "      <td>546.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>STORE143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>958.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>STORE149</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>STORE196</td>\n",
              "      <td>0.0</td>\n",
              "      <td>658.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     STORES  SALES         \n",
              "               min      max\n",
              "0  STORE110   40.0  1794.75\n",
              "1  STORE113    0.0   898.00\n",
              "2  STORE114    0.0  1794.75\n",
              "3  STORE115  321.0  1186.00\n",
              "4  STORE127   29.0   942.00\n",
              "5  STORE133  114.0   906.00\n",
              "6  STORE136  143.0   546.00\n",
              "7  STORE143    0.0   958.00\n",
              "8  STORE149    0.0  1794.75\n",
              "9  STORE196    0.0   658.00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7keDthpSkTlL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "salesdata_grouped.columns = salesdata_grouped.columns.droplevel(level=0)\n",
        "salesdata_grouped.columns = ['STORES','min_sales','max_sales']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "joMsQ1CakUJX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "e66d0e88-06f0-4417-a072-18f5be95c821"
      },
      "source": [
        "salesdata_grouped"
      ],
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th>min_sales</th>\n",
              "      <th>max_sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>STORE113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>898.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>STORE114</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>STORE115</td>\n",
              "      <td>321.0</td>\n",
              "      <td>1186.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>STORE127</td>\n",
              "      <td>29.0</td>\n",
              "      <td>942.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>STORE133</td>\n",
              "      <td>114.0</td>\n",
              "      <td>906.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>STORE136</td>\n",
              "      <td>143.0</td>\n",
              "      <td>546.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>STORE143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>958.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>STORE149</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>STORE196</td>\n",
              "      <td>0.0</td>\n",
              "      <td>658.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     STORES  min_sales  max_sales\n",
              "0  STORE110       40.0    1794.75\n",
              "1  STORE113        0.0     898.00\n",
              "2  STORE114        0.0    1794.75\n",
              "3  STORE115      321.0    1186.00\n",
              "4  STORE127       29.0     942.00\n",
              "5  STORE133      114.0     906.00\n",
              "6  STORE136      143.0     546.00\n",
              "7  STORE143        0.0     958.00\n",
              "8  STORE149        0.0    1794.75\n",
              "9  STORE196        0.0     658.00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 188
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3ZfQJ88_kUXZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Merging the min_sales and max_sales columns of salesdata_grouped with the main salesdata table\n",
        "\n",
        "sales_merged = pd.merge(salesdata_grouped,salesdata[['STORES','SALES','DATES']],how='inner',left_on=['STORES','min_sales'],right_on = ['STORES','SALES'])\n",
        "sales_merged = pd.merge(sales_merged,salesdata[['STORES','SALES','DATES']],how='inner',left_on=['STORES','max_sales'],right_on = ['STORES','SALES'])\n",
        "sales_merged.drop(['SALES_x','SALES_y'],inplace=True,axis=1)\n",
        "sales_merged.rename(columns={\"DATES_x\": \"Date with Minimum Sales\", \"DATES_y\": \"Date with Maximum Sales\"},inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cKsuFrOUkUhR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "8783b29c-ba92-4d31-8ce6-00bc9365c577"
      },
      "source": [
        "sales_merged"
      ],
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th>min_sales</th>\n",
              "      <th>max_sales</th>\n",
              "      <th>Date with Minimum Sales</th>\n",
              "      <th>Date with Maximum Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>2018-01-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>STORE113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>898.00</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>STORE113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>898.00</td>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>STORE114</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>STORE115</td>\n",
              "      <td>321.0</td>\n",
              "      <td>1186.00</td>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>STORE127</td>\n",
              "      <td>29.0</td>\n",
              "      <td>942.00</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>STORE133</td>\n",
              "      <td>114.0</td>\n",
              "      <td>906.00</td>\n",
              "      <td>2018-01-05</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>STORE136</td>\n",
              "      <td>143.0</td>\n",
              "      <td>546.00</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>2018-01-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>STORE143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>958.00</td>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>2018-01-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>STORE149</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>STORE196</td>\n",
              "      <td>0.0</td>\n",
              "      <td>658.00</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>2018-01-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>STORE196</td>\n",
              "      <td>0.0</td>\n",
              "      <td>658.00</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>2018-01-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      STORES  min_sales  ...  Date with Minimum Sales Date with Maximum Sales\n",
              "0   STORE110       40.0  ...               2018-01-07              2018-01-05\n",
              "1   STORE110       40.0  ...               2018-01-07              2018-01-06\n",
              "2   STORE113        0.0  ...               2018-01-07              2018-01-05\n",
              "3   STORE113        0.0  ...               2018-01-02              2018-01-05\n",
              "4   STORE114        0.0  ...               2018-01-06              2018-01-07\n",
              "5   STORE115      321.0  ...               2018-01-02              2018-01-07\n",
              "6   STORE127       29.0  ...               2018-01-01              2018-01-07\n",
              "7   STORE133      114.0  ...               2018-01-05              2018-01-05\n",
              "8   STORE136      143.0  ...               2018-01-03              2018-01-03\n",
              "9   STORE143        0.0  ...               2018-01-02              2018-01-02\n",
              "10  STORE149        0.0  ...               2018-01-01              2018-01-05\n",
              "11  STORE196        0.0  ...               2018-01-06              2018-01-02\n",
              "12  STORE196        0.0  ...               2018-01-06              2018-01-02\n",
              "\n",
              "[13 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iR8_cylIoJEQ",
        "colab_type": "text"
      },
      "source": [
        "###**13) There can be multiple same date variable present for each store. Make sure after processing each date appear only once for each store.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VR4DSzL0oLqX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "466577f3-eee1-4734-ceac-12d5ad50d78b"
      },
      "source": [
        "sales_merged = sales_merged.drop_duplicates(['STORES'], keep='first')\n",
        "sales_merged"
      ],
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th>min_sales</th>\n",
              "      <th>max_sales</th>\n",
              "      <th>Date with Minimum Sales</th>\n",
              "      <th>Date with Maximum Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>STORE110</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>STORE113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>898.00</td>\n",
              "      <td>2018-01-07</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>STORE114</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>STORE115</td>\n",
              "      <td>321.0</td>\n",
              "      <td>1186.00</td>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>STORE127</td>\n",
              "      <td>29.0</td>\n",
              "      <td>942.00</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>2018-01-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>STORE133</td>\n",
              "      <td>114.0</td>\n",
              "      <td>906.00</td>\n",
              "      <td>2018-01-05</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>STORE136</td>\n",
              "      <td>143.0</td>\n",
              "      <td>546.00</td>\n",
              "      <td>2018-01-03</td>\n",
              "      <td>2018-01-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>STORE143</td>\n",
              "      <td>0.0</td>\n",
              "      <td>958.00</td>\n",
              "      <td>2018-01-02</td>\n",
              "      <td>2018-01-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>STORE149</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1794.75</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>2018-01-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>STORE196</td>\n",
              "      <td>0.0</td>\n",
              "      <td>658.00</td>\n",
              "      <td>2018-01-06</td>\n",
              "      <td>2018-01-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      STORES  min_sales  ...  Date with Minimum Sales Date with Maximum Sales\n",
              "0   STORE110       40.0  ...               2018-01-07              2018-01-05\n",
              "2   STORE113        0.0  ...               2018-01-07              2018-01-05\n",
              "4   STORE114        0.0  ...               2018-01-06              2018-01-07\n",
              "5   STORE115      321.0  ...               2018-01-02              2018-01-07\n",
              "6   STORE127       29.0  ...               2018-01-01              2018-01-07\n",
              "7   STORE133      114.0  ...               2018-01-05              2018-01-05\n",
              "8   STORE136      143.0  ...               2018-01-03              2018-01-03\n",
              "9   STORE143        0.0  ...               2018-01-02              2018-01-02\n",
              "10  STORE149        0.0  ...               2018-01-01              2018-01-05\n",
              "11  STORE196        0.0  ...               2018-01-06              2018-01-02\n",
              "\n",
              "[10 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 201
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBgLUB5YqCeB",
        "colab_type": "text"
      },
      "source": [
        "###**14)  Date colum ranges between 2018/01/01 to 2018/01/07. Make sure that all these dates are present for each store. Do the required padding/filling for other columns while performing this operation.  Sales and count can be aggregated by addition.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_b_KVxZpxK92",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2000
        },
        "outputId": "536e4a98-6539-458f-a28c-e46d119ff230"
      },
      "source": [
        "salesdata.groupby('STORES').apply(lambda x: x.reindex(pd.date_range('2018-01-01','2018-01-07',freq='D')))\n",
        "# salesdata_grouped_store.columns = salesdata_grouped_store.columns.droplevel(level=0)\n"
      ],
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>STORES</th>\n",
              "      <th>DATES</th>\n",
              "      <th>SALES</th>\n",
              "      <th>COUNT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STORES</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE110</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE113</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE114</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE115</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">STORE127</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">STORE133</th>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE136</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE143</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE149</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"7\" valign=\"top\">STORE196</th>\n",
              "      <th>2018-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-06</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-07</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>70 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                    STORES DATES  SALES  COUNT\n",
              "STORES                                        \n",
              "STORE110 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE113 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE114 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE115 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE127 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "...                    ...   ...    ...    ...\n",
              "STORE133 2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE136 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE143 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE149 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "STORE196 2018-01-01    NaN   NaT    NaN    NaN\n",
              "         2018-01-02    NaN   NaT    NaN    NaN\n",
              "         2018-01-03    NaN   NaT    NaN    NaN\n",
              "         2018-01-04    NaN   NaT    NaN    NaN\n",
              "         2018-01-05    NaN   NaT    NaN    NaN\n",
              "         2018-01-06    NaN   NaT    NaN    NaN\n",
              "         2018-01-07    NaN   NaT    NaN    NaN\n",
              "\n",
              "[70 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 232
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iiAy0R23qByF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "550890ec-dbbb-43c8-e602-f4948299d2b3"
      },
      "source": [
        "\n",
        ".apply(lambda x: x.reindex(pd.date_range('2018-01-01','2018-01-07',freq='D'))).drop('STORES',axis=1).fillna(0)"
      ],
      "execution_count": 206,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[1;32m    688\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 689\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_python_apply_general\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    690\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m_python_apply_general\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m    706\u001b[0m         keys, values, mutated = self.grouper.apply(f, self._selected_obj,\n\u001b[0;32m--> 707\u001b[0;31m                                                    self.axis)\n\u001b[0m\u001b[1;32m    708\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/ops.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, data, axis)\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mgroup_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_axes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    191\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_is_indexed_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_axes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-206-aeff9ffa8fa3>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfilled_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msalesdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'DATES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate_range\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2018-01-01'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-01-07'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'D'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 197\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3808\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'labels'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3809\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   4355\u001b[0m         return self._reindex_axes(axes, level, limit, tolerance, method,\n\u001b[0;32m-> 4356\u001b[0;31m                                   fill_value, copy).__finalize__(self)\n\u001b[0m\u001b[1;32m   4357\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_axes\u001b[0;34m(self, axes, level, limit, tolerance, method, fill_value, copy)\u001b[0m\n\u001b[1;32m   3740\u001b[0m             frame = frame._reindex_index(index, method, copy, level,\n\u001b[0;32m-> 3741\u001b[0;31m                                          fill_value, limit, tolerance)\n\u001b[0m\u001b[1;32m   3742\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_index\u001b[0;34m(self, new_index, method, copy, level, fill_value, limit, tolerance)\u001b[0m\n\u001b[1;32m   3751\u001b[0m                                            \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3752\u001b[0;31m                                            allow_dups=False)\n\u001b[0m\u001b[1;32m   3753\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_reindex_with_indexers\u001b[0;34m(self, reindexers, fill_value, copy, allow_dups)\u001b[0m\n\u001b[1;32m   4489\u001b[0m                                                 \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mallow_dups\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4490\u001b[0;31m                                                 copy=copy)\n\u001b[0m\u001b[1;32m   4491\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mreindex_indexer\u001b[0;34m(self, new_axis, indexer, axis, fill_value, allow_dups, copy)\u001b[0m\n\u001b[1;32m   1223\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1224\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_reindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_can_reindex\u001b[0;34m(self, indexer)\u001b[0m\n\u001b[1;32m   3086\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_unique\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3087\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cannot reindex from a duplicate axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3088\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: cannot reindex from a duplicate axis",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-206-aeff9ffa8fa3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfilled_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msalesdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'DATES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate_range\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2018-01-01'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-01-07'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'D'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[1;32m    699\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0m_group_selection_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_python_apply_general\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m_python_apply_general\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m    705\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_python_apply_general\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m         keys, values, mutated = self.grouper.apply(f, self._selected_obj,\n\u001b[0;32m--> 707\u001b[0;31m                                                    self.axis)\n\u001b[0m\u001b[1;32m    708\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m         return self._wrap_applied_output(\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/groupby/ops.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, data, axis)\u001b[0m\n\u001b[1;32m    188\u001b[0m             \u001b[0;31m# group might be modified\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mgroup_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_axes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    191\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_is_indexed_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_axes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m                 \u001b[0mmutated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-206-aeff9ffa8fa3>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfilled_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msalesdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'DATES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdate_range\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'2018-01-01'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-01-07'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'D'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'STORES'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    195\u001b[0m         \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 197\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mPY2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3807\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axis'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3808\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'labels'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3809\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3811\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mAppender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_shared_docs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'reindex_axis'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0m_shared_doc_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mreindex\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   4354\u001b[0m         \u001b[0;31m# perform the reindex on the axes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4355\u001b[0m         return self._reindex_axes(axes, level, limit, tolerance, method,\n\u001b[0;32m-> 4356\u001b[0;31m                                   fill_value, copy).__finalize__(self)\n\u001b[0m\u001b[1;32m   4357\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4358\u001b[0m     def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value,\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_axes\u001b[0;34m(self, axes, level, limit, tolerance, method, fill_value, copy)\u001b[0m\n\u001b[1;32m   3739\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3740\u001b[0m             frame = frame._reindex_index(index, method, copy, level,\n\u001b[0;32m-> 3741\u001b[0;31m                                          fill_value, limit, tolerance)\n\u001b[0m\u001b[1;32m   3742\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3743\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_reindex_index\u001b[0;34m(self, new_index, method, copy, level, fill_value, limit, tolerance)\u001b[0m\n\u001b[1;32m   3750\u001b[0m         return self._reindex_with_indexers({0: [new_index, indexer]},\n\u001b[1;32m   3751\u001b[0m                                            \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3752\u001b[0;31m                                            allow_dups=False)\n\u001b[0m\u001b[1;32m   3753\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3754\u001b[0m     def _reindex_columns(self, new_columns, method, copy, level,\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_reindex_with_indexers\u001b[0;34m(self, reindexers, fill_value, copy, allow_dups)\u001b[0m\n\u001b[1;32m   4488\u001b[0m                                                 \u001b[0mfill_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4489\u001b[0m                                                 \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mallow_dups\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4490\u001b[0;31m                                                 copy=copy)\n\u001b[0m\u001b[1;32m   4491\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4492\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mnew_data\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mreindex_indexer\u001b[0;34m(self, new_axis, indexer, axis, fill_value, allow_dups, copy)\u001b[0m\n\u001b[1;32m   1222\u001b[0m         \u001b[0;31m# some axes don't allow reindexing with dups\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1223\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1224\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_reindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1226\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_can_reindex\u001b[0;34m(self, indexer)\u001b[0m\n\u001b[1;32m   3085\u001b[0m         \u001b[0;31m# trying to reindex on an axis with duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3086\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_unique\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3087\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cannot reindex from a duplicate axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3088\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3089\u001b[0m     def reindex(self, target, method=None, level=None, limit=None,\n",
            "\u001b[0;31mValueError\u001b[0m: cannot reindex from a duplicate axis"
          ]
        }
      ]
    }
  ]
}
